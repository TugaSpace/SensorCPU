#include <Adafruit_BMP3XX.h>
#include <ICM20948_WE.h>
#include <Wire.h>
#include <SPI.h>
#include <freertos/FreeRTOS.h>
#include <freertos/task.h>
#include "FRAMBuffer.h"
#include "FlightStateManager.h"

#define BMP_CS 2            // Pino SPI para o BMP388
#define ICM_CS 1            // Pino SPI para o ICM20948
#define FRAM_I2C_ADDR 0x50  // Endereço I2C da FRAM
#define FRAM_SIZE 32768     // Tamanho total da FRAM em bytes

struct TelemetryData {
    uint32_t packetNumber;
    uint32_t timestamp;
    float temperature;
    float pressure;
    float accX, accY, accZ;
    float gyrX, gyrY, gyrZ;
    float magX, magY, magZ;
};

Adafruit_BMP3XX bmp;
ICM20948_WE myICM(ICM_CS, true);
FRAMBuffer<TelemetryData> framBuffer;
FlightStateManager flightStateManager;
SemaphoreHandle_t xSemaphore;
QueueHandle_t dataQueue;
volatile uint32_t packetNumber = 0;

void setup() {
    Serial.begin(115200);

    // Configuração do BMP388
    if (!bmp.begin_SPI(BMP_CS)) {
        Serial.println("Falha ao inicializar o BMP388!");
        while (1);
    }

    // Configuração do ICM20948
    if (!myICM.init()) {
        Serial.println("Falha ao inicializar o ICM20948!");
        while (1);
    }
    if (!myICM.initMagnetometer()) {
        Serial.println("Magnetômetro não responde");
    } else {
        Serial.println("Magnetômetro conectado");
    }

    // Inicializa a FRAM e carrega o estado
    if (!framBuffer.begin()) {
        Serial.println("Falha ao inicializar a FRAM.");
        while (1);
    }

    // Criação do semáforo e fila
    xSemaphore = xSemaphoreCreateBinary();
    if (xSemaphore == NULL) {
        Serial.println("Falha ao criar o semáforo!");
        while (1);
    }
    xSemaphoreGive(xSemaphore);

    dataQueue = xQueueCreate(10, sizeof(TelemetryData));
    if (dataQueue == NULL) {
        Serial.println("Falha ao criar a fila de dados!");
        while (1);
    }

    // Criação das tarefas para leitura dos sensores e armazenamento na FRAM
    xTaskCreatePinnedToCore(readBMP388, "Read BMP388", 2048, NULL, 1, NULL, 1);
    xTaskCreatePinnedToCore(readICM20948, "Read ICM20948", 2048, NULL, 1, NULL, 1);
    xTaskCreatePinnedToCore(storeToFRAM, "Store to FRAM", 2048, NULL, 1, NULL, 1);
}

void loop() {
    // Não é necessário implementar nada aqui, pois estamos usando FreeRTOS
}

void readBMP388(void* parameter) {
    for (;;) {
        if (bmp.performReading()) {
            float temperature = bmp.temperature;
            float pressure = bmp.pressure / 100.0;  // Conversão para hPa
            packetNumber++;

            xSemaphoreGive(xSemaphore);
        }
        vTaskDelay(100);  // 10 Hz
    }
}

void readICM20948(void* parameter) {
    for (;;) {
        if (xSemaphoreTake(xSemaphore, portMAX_DELAY) == pdTRUE) {
            myICM.readSensor();
            xyzFloat gValue = myICM.getGValues();
            xyzFloat gyr = myICM.getGyrValues();
            xyzFloat magValue = myICM.getMagValues();
            float temp = myICM.getTemperature();
            float resultantG = myICM.getResultantG(gValue);
            uint32_t timestamp = millis();

            TelemetryData data;
            data.packetNumber = packetNumber;
            data.timestamp = timestamp;
            data.temperature = bmp.temperature;
            data.pressure = bmp.pressure / 100.0;
            data.accX = gValue.x;
            data.accY = gValue.y;
            data.accZ = gValue.z;
            data.gyrX = gyr.x;
            data.gyrY = gyr.y;
            data.gyrZ = gyr.z;
            data.magX = magValue.x;
            data.magY = magValue.y;
            data.magZ = magValue.z;

            if (xQueueSend(dataQueue, &data, portMAX_DELAY) != pdPASS) {
                Serial.println("Falha ao enviar dados para a fila");
            }

            flightStateManager.updateState(gValue.x, gValue.y, gValue.z, bmp.pressure / 100.0, gyr.x, gyr.y, gyr.z, timestamp);
        }
        vTaskDelay(100);  // 10 Hz
    }
}

void storeToFRAM(void* parameter) {
    TelemetryData data;
    for (;;) {
        if (xQueueReceive(dataQueue, &data, portMAX_DELAY) == pdTRUE) {
            framBuffer.writeData(data);
            readTelemetryDataFromFRAM(data.packetNumber);
        }
    }
}

void readTelemetryDataFromFRAM(uint32_t packetNumber) {
    TelemetryData data;
    if (framBuffer.readData(data)) {
        Serial.print("Pacote: ");
        Serial.print(data.packetNumber);
        Serial.print(", Tempo: ");
        Serial.print(data.timestamp);
        Serial.print(" ms, Temperatura: ");
        Serial.print(data.temperature);
        Serial.print(" C, Pressão: ");
        Serial.print(data.pressure);
        Serial.print(" hPa, Aceleração: X=");
        Serial.print(data.accX);
        Serial.print(" Y=");
        Serial.print(data.accY);
        Serial.print(" Z=");
        Serial.print(data.accZ);
        Serial.print(" Giroscópio: X=");
        Serial.print(data.gyrX);
        Serial.print(" Y=");
        Serial.print(data.gyrY);
        Serial.print(" Z=");
        Serial.print(data.gyrZ);
        Serial.print(" Magnetômetro: X=");
        Serial.print(data.magX);
        Serial.print(" Y=");
        Serial.print(data.magY);
        Serial.print(" Z=");
        Serial.println(data.magZ);
    } else {
        Serial.println("Falha ao ler o pacote da FRAM.");
    }
}



